data_3 %>%
filter(row_name = class)
data_3 %>%
filter(row_name == class)
data_3 %>%
filter(row_name == 'class')
data_3 %>%
filter(row_name == 'class') %>%
gather(variable, value, -row_name)
data_3 %>%
filter(row_name == 'class') %>%
gather(variable, value, -row_name) %>%
arrange(value)
data_3 %>%
filter(row_name == 'class') %>%
gather(variable, value, -row_name) %>%
arrange(desc(value))
data_3 %>%
filter(row_name == 'class') %>%
gather(variable, value, -row_name) %>%
arrange(desc(value)) -> data_4
data_4$variable <- factor(data_4$variable, levels = data_4$variable)
data_4 %>% str()
data_4 %>%
slice(-1)
data_4 %>%
slice(-1) %>%
ggplot(aes(variable, value)) + geom_point()
data_4 %>%
slice(-1) %>%
ggplot(aes(variable, value)) + geom_point() + coord_flip()
data_4
data_4$variable <- factor(data_4$variable, levels = rev(data_4$variable))
data_4 %>% str()
data_4 %>%
slice(-1) %>%
ggplot(aes(variable, value)) + geom_point() + coord_flip()
# RandomForest
# install.packages('randomForest')
library(randomForest)
data_4 %>%
dplyr::select(class, worst_concave_points)
data_3%>%
dplyr::select(class, worst_concave_points)
data_3
data_4
data %>%
dplyr::select(class, worst_concave_points)
data_1%>%
dplyr::select(class, worst_concave_points)
data_1 %>%
dplyr::select(class, worst_concave_points) %>%
ggplot(aes(class, worst_concave_points)) +
geom_boxplot()
data %>%
dplyr::select(class, worst_concave_points) %>%
ggplot(aes(class, worst_concave_points)) +
geom_boxplot()
data %>%
dplyr::select(class, worst_concave_points) %>%
ggplot(aes(class, worst_concave_points)) +
geom_boxplot() +
geom_jitter()
data %>%
dplyr::select(class, worst_concave_points) %>%
ggplot(aes(class, worst_concave_points)) +
geom_boxplot() +
geom_jitter(alpha = .5)
data %>%
dplyr::select(class, worst_concave_points) %>%
ggplot(aes(class, worst_concave_points, col = class)) +
geom_boxplot() +
geom_jitter(alpha = .5)
data %>%
dplyr::select(class, worst_concave_points) %>%
ggplot(aes(class, worst_concave_points, col = class)) +
geom_boxplot() +
geom_jitter(alpha = .5) +
scale_fill_brewer(palette = "Set1")
data %>%
dplyr::select(class, worst_concave_points) %>%
ggplot(aes(class, worst_concave_points, col = class)) +
geom_boxplot() +
geom_jitter(alpha = .5) +
scale_col_brewer(palette = "Set1")
data %>%
dplyr::select(class, worst_concave_points) %>%
ggplot(aes(class, worst_concave_points, col = class)) +
geom_boxplot() +
geom_jitter(alpha = .5) +
scale_color_brewer(palette = "Set1")
data %>%
dplyr::select(class, worst_concave_points) %>%
ggplot(aes(class, worst_concave_points, col = class)) +
geom_boxplot() +
geom_jitter(alpha = .5) +
scale_color_brewer(palette = "Set1") -> p1
library(gridExtra)
data %>%
dplyr::select(class, mean_perimeter) %>%
ggplot(aes(class, worst_concave_points, col = class)) +
geom_boxplot() +
geom_jitter(alpha = .5) +
scale_color_brewer(palette = "Set1") -> p2
p2
data %>%
dplyr::select(class, mean_perimeter) %>%
ggplot(aes(class, mean_perimeter, col = class)) +
geom_boxplot() +
geom_jitter(alpha = .5) +
scale_color_brewer(palette = "Set1") -> p2
p2
data %>%
dplyr::select(worst_concave_point, mean_perimeter)
data %>%
dplyr::select(worst_concave_points, mean_perimeter)
data %>%
dplyr::select(worst_concave_points, mean_perimeter)  %>%
ggplot(aes(worst_concave_points, mean_perimeter, col = class)) +
geomk_point()
data %>%
dplyr::select(worst_concave_points, mean_perimeter)  %>%
ggplot(aes(worst_concave_points, mean_perimeter, col = class)) +
geom_point()
data %>%
dplyr::select(worst_concave_points, mean_perimeter)  %>%
ggplot(aes(worst_concave_points, mean_perimeter, fill = class)) +
geom_point()
s
data %>%
dplyr::select(worst_concave_points, mean_perimeter)  %>%
ggplost(aes(worst_concave_points, mean_perimeter,  hue = class)) +
geom_point()
data %>%
dplyr::select(worst_concave_points, mean_perimeter)  %>%
ggplot(aes(worst_concave_points, mean_perimeter,  hue = class)) +
geom_point()
data %>%
dplyr::select(worst_concave_points, mean_perimeter)  %>%
ggplot(aes(worst_concave_points, mean_perimeter,  color = class)) +
geom_point()
data %>%
dplyr::select(worst_concave_points, mean_perimeter)  %>%
ggplot(aes(worst_concave_points, mean_perimeter,  col = class)) +
geom_point()
data %>%
dplyr::select(worst_concave_points, mean_perimeter)  %>%
ggplot(aes(worst_concave_points, mean_perimeter)) +
geom_point()
data %>%
dplyr::select(worst_concave_points, mean_perimeter)  %>%
ggplot(aes(worst_concave_points, mean_perimeter)) +
geom_point() + geom_smooth()
data %>%
dplyr::select(worst_concave_points, mean_perimeter)  %>%
ggplot(aes(worst_concave_points, mean_perimeter, col = class)) +
geom_point() + geom_smooth()
data %>% str()
data$class <- as.factor(data$class)
data %>%
dplyr::select(worst_concave_points, mean_perimeter)  %>%
ggplot(aes(worst_concave_points, mean_perimeter, col = class)) +
geom_point() + geom_smooth()
data %>% str()
data %>%
ggplot(aes(worst_concave_points, mean_perimeter, col = class)) +
geom_point() + geom_smooth()
data %>%
ggplot(aes(worst_concave_points, mean_perimeter, col = class)) +
geom_point()
data %>%
ggplot(aes(worst_concave_points, mean_perimeter, col = class)) +
geom_point() +
scale_color_brewer(palette = "Set1") -> p3
p3
data$class <- as.factor(data$class)
library(gridExtra)
data %>%
dplyr::select(class, worst_concave_points) %>%
ggplot(aes(class, worst_concave_points, col = class)) +
geom_boxplot() +
geom_jitter(alpha = .5) +
scale_color_brewer(palette = "Set1") -> p1
data %>%
dplyr::select(class, mean_perimeter) %>%
ggplot(aes(class, mean_perimeter, col = class)) +
geom_boxplot() +
geom_jitter(alpha = .5) +
scale_color_brewer(palette = "Set1") -> p2
data %>% str()
data %>%
ggplot(aes(class)) + geom_bar(stat = 'identity')
data$class
data$class %>% count()
data %>% count(class)
data_n <- data %>% count(class)
data_n %>%
ggplot(aes(class, n)) + geom_bar(stat = 'identity')
data_n %>%
ggplot(aes(class, n, fill = class)) + geom_bar(stat = 'identity')
p3
data_n %>%
ggplot(aes(class, n, fill = class)) + geom_bar(stat = 'identity') +
scale_color_brewer(palette = "Set1")
data_n %>%
ggplot(aes(class, n, fill = class)) + geom_bar(stat = 'identity') +
scale_fill_brewer(palette = "Set1")
data_n %>%
ggplot(aes(class, n, fill = class)) + geom_bar(stat = 'identity') +
scale_fill_brewer(palette = "Set1") -> p4
grid.arrange(p1, p2, p3, p4, ncol = 2)
data %>% glimpse()
summary(data)
data %>%
dplyr::select(-id, -row_names) %>%
mutate(class = recode(class,
'M'= 1,
'B' = 0)) -> data_1
data_1 %>% colnames()
data_1 %>% dim()
library(psych)
pairs.panels(data_1)
data_1 %>%
dplyr::select(class, contains('mean_')) %>%
pairs.panels()
data_1 %>%
dplyr::select(class, contains('mean_')) %>%
pairs.panels()
data_1 %>%
dplyr::select(class, contains('se_')) %>%
pairs.panels()
data_1 %>%
dplyr::select(class, contains('worst_')) %>%
pairs.panels()
cor(data_1) %>%
as_tibble() -> data_2
cor(data_1) %>%
as_tibble() -> data_2
data_2 %>%
mutate(row_name = colnames(.)) %>%
dplyr::select(row_name, everything()) -> data_3
data_3 %>%
filter(row_name == 'class') %>%
gather(variable, value, -row_name) %>%
arrange(desc(value)) -> data_4
data_4$variable <- factor(data_4$variable, levels = rev(data_4$variable))
data_4 %>% str()
data_4 %>%
slice(-1) %>%
ggplot(aes(variable, value)) + geom_point() + coord_flip()
data$class <- as.factor(data$class)
library(gridExtra)
data %>%
dplyr::select(class, worst_concave_points) %>%
ggplot(aes(class, worst_concave_points, col = class)) +
geom_boxplot() +
geom_jitter(alpha = .5) +
scale_color_brewer(palette = "Set1") -> p1
data %>%
dplyr::select(class, mean_perimeter) %>%
ggplot(aes(class, mean_perimeter, col = class)) +
geom_boxplot() +
geom_jitter(alpha = .5) +
scale_color_brewer(palette = "Set1") -> p2
data %>%
ggplot(aes(worst_concave_points, mean_perimeter, col = class)) +
geom_point() +
scale_color_brewer(palette = "Set1") -> p3
data_n <- data %>% count(class)
data_n %>%
ggplot(aes(class, n, fill = class)) + geom_bar(stat = 'identity') +
scale_fill_brewer(palette = "Set1") -> p4
grid.arrange(p1, p2, p3, p4, ncol = 2)
library(caret)
train_idx <- createDataPartition(data_1$class. p = .8, list = F)[, 1]
train_idx <- createDataPartition(data_1$class, p = .8, list = F)[, 1]
train_idx
train_idx %>% length()
setdiff(1:nrow(data_1), train_idx)
test_idx <- setdiff(1:nrow(data_1), train_idx)
train_idx %>% length()
train_idx %>% length()
test_idx %>% length()
train_set <- data_1[train_idx, ]
test_set <- data_1[test_idx, ]
train_set %>% dim()
test_set %>% dim()
train_set %>% str()
test_set %>% str()
m < ada(Species ~., data=train_data, iter=20, nu=1, type='discrete')
m < ada(class ~., data=train_data, iter=20, nu=1, type='discrete')
# modeling with ada...
model.matrix(train_data)
# modeling with ada...
model.matrix(train_set)
m < ada(class ~., data=train_set, iter=20, nu=1, type='discrete')
train_set %>% str()
train_idx <- createDataPartition(data$class, p = .8, list = F)[, 1]
train_idx %>% length()
test_idx <- setdiff(1:nrow(data_1), train_idx)
test_idx %>% length()
train_set <- data[train_idx, ]
test_set <- data[test_idx, ]
train_set %>% dim()
test_set %>% dim()
train_set %>% str()
test_set %>% str()
m < ada(class ~., data=train_set, iter=20, nu=1, type='discrete')
train_idx <- createDataPartition(data$class, p = .8, list = F)[, 1]
train_idx %>% length()
test_idx <- setdiff(1:nrow(data_1), train_idx)
test_idx %>% length()
train_set <- data[train_idx, ]
test_set <- data[test_idx, ]
train_set %>% dim()
test_set %>% dim()
train_set %>% str()
test_set %>% str()
train_set
library(caret)
train_idx <- createdata_1Partition(data_1$class, p = .8, list = F)[, 1]
train_idx %>% length()
test_idx <- setdiff(1:nrow(data_1_1), train_idx)
test_idx %>% length()
train_set <- data_1[train_idx, ]
test_set <- data_1[test_idx, ]
train_set %>% dim()
test_set %>% dim()
train_set %>% str()
test_set %>% str()
train_set$class <- as.factor(train_set$class)
test_set$class <- as.factor(test_set$class)
m < ada(class ~., data=train_set, iter=20, nu=1, type='discrete')
m < ada(class ~., data=train_set, iter=20, nu=1)
train_set %>% str()
train_set$class <- factor(train_set$class, levels = c(0, 1), labels = c(0, 1))
test_set$class <- factor(test_set$class, levels = c(0, 1), labels = c(0, 1))
train_set %>% str()
train_set
train_set %>% distinct(class)
m < ada(class ~., data=train_set, iter=20, nu=1)
m <- ada(class ~., data=train_set, iter=20, nu=1)
m
m
addtest(m, test_data[, -1], test_data[, 1])
test_set
test_set %>% distinct(class)
addtest(m, test_set[, -1], test_set[, 1])
yhat_ada <- addtest(m, test_set[, -1], test_set[, 1])
yhat_ada
# validation -------------------------------------------------------------------------
predict(m, test_set[, -1])
# validation -------------------------------------------------------------------------
yhat_ada <- predict(m, test_set[, -1])
# validation -------------------------------------------------------------------------
addtest(m, test_set[, -1], test_set[, 1])
yhat_ada <- predict(m, test_set[, -1], type = 'response')
yhat_ada <- predict(m, test_set[, -1], type = 'prob')
yhat_ada
yhat_ada <- predict(m, test_set[, -1], type = 'prob')[, 1]
yhat_ada
librart(ROCR)
library(ROCR)
yobs <- test_set[, 1]
yobs
prediction(yhat_ada, yobs)
y_pred_ada <- prediction(yhat_ada, yobs)
y_perf_ada <- performance(y_pred_ada, measure = 'fpr', x.measure = 'tpr')
plot(y_perf_ada)
abline(0, 1)
performance(y_pred_ada, 'auc')@y.values[[1]]
yhat_ada <- predict(m, test_set[, -1], type = 'prob')[, 2]
yobs <- test_set[, 1]
library(ROCR)
y_pred_ada <- prediction(yhat_ada, yobs)
y_perf_ada <- performance(y_pred_ada, measure = 'tpr', x.measure = 'fpr')
plot(y_perf_ada)
abline(0, 1)
performance(y_pred_ada, 'auc')@y.values[[1]]
y_pred_ada
yhat_ada
test_set[, 1]
test_set[, 1] $>$ enframe()
test_set[, 1] %>%
enframe()
test_set[, 1] %>%
enframe() %>% mutate(y_hat = round(yhat_ada, 2))
test_set[, 1] %>%
enframe() %>% mutate(y_hat = round(yhat_ada, 2)) %>% View()
boosting(class ~ ., data=train_set, boos=T, mfinal=10)
m_ada_boost <- boosting(class ~ ., data=train_set, boos=T, mfinal=10)
predict(m_ada_boost, test_set[, -1], type = 'prob')
predict(m_ada_boost, test_set[, -1], type = 'prob')[, 2]
m_ada_boost
predict(m_ada_boost, test_set[, -1], type = 'prob')
yhat_ada_boost <- predict(m_ada_boost, test_set[, -1], type = 'prob')
yhat_ada_boost
yhat_ada_boost$prob
yhat_ada_boost$prob[, 2]
yhat_ada_boost_obs <- predict(m_ada_boost, test_set[, -1], type = 'prob')
yaht_ada_boost <- yhat_ada_boost_obs$prob[, 2]
yhat_ada_boost <- yhat_ada_boost_obs$prob[, 2]
yhat_ada_boost
# -------------------------------------------------------------------------
yobs <- test_set[, 1]
m_ada_boost <- boosting(class ~ ., data=train_set, boos=T, mfinal=10)
yhat_ada_boost_obs <- predict(m_ada_boost, test_set[, -1], type = 'prob')
yhat_ada_boost <- yhat_ada_boost_obs$prob[, 2]
y_pred_ada_boost <- prediction(yhat_ada_boost, yobs)
y_pred_ada_boost
y_perf_ada_boost <- performance(y_pred_ada_boost, measure = 'tpr', x.measure = 'fpr')
plot(y_perf_ada_boost)
abline(0, 1)
test_set[, 1] %>%
enframe() %>% mutate(yhat_ada = round(yhat_ada, 2)) %>%
mutate(yhat_ada_boost = round(yhat_ada_boost, 2))
plot(y_perf_ada)
plot(y_perf_ada_boost, add = T, col = 'red')
abline(0, 1)
performance(y_pred_ada_boost, 'auc')@y.values[[1]]
performance(y_pred_ada, 'auc')@y.values[[1]]
plot(y_perf_ada)
plot(y_perf_ada_boost, add = T, col = 'red', lty = 2)
plot(y_perf_ada_boost, add = T, col = 'red', lty = 3)
plot(y_perf_ada)
plot(y_perf_ada_boost, add = T, col = 'red', lty = 3)
plot(y_perf_ada)
plot(y_perf_ada_boost, add = T, col = 'red', lty = 4)
plot(y_perf_ada)
plot(y_perf_ada_boost, add = T, col = 'red', lty = 7)
plot(y_perf_ada)
plot(y_perf_ada_boost, add = T, col = 'red', lty = 9)
plot(y_perf_ada)
plot(y_perf_ada_boost, add = T, col = 'red', lty = 2)
abline(0, 1)
# RandomForest
# install.packages('randomForest')
library(randomForest)
library(rpart)
data("stagec")
head(stagec)
dim(stagec)
str(stagec)
data(stagec)
library(randomForest)
library(rpart)
data(stagec)
library(randomForest)
library(rpart)
data(stagec)
head(stagec)
summary(stagec)
library(Amelia)
missmap(stagec)
amelia?
?amelia
??Amelia
amelia(stagec, m = 5, cs = 'ploidy')
imp_stagec <- amelia(stagec, m = 5, cs = 'ploidy')
imp_stagec$imputations[[1]]
stagec_1 <- imp_stagec$imputations[[1]]
summary(stagec)
??Amelia
plot(imp_stagec)
stagec_1 <- imp_stagec$imputations[[5]]
summary(stagec)
summary(stagec_1)
par(mefrow = c(1 , 2))
plot(imp_stagec)
missmap(stagec_1)
par(mfrow = c(1 , 2))
plot(imp_stagec)
missmap(stagec_1)
createDataPartition(stagec_1$class, p =.8, list = F)[, 1]
library(caret)
createDataPartition(stagec_1$class, p =.8, list = F)[, 1]
library(caret)
createDataPartition(stagec_1$ploidy, p =.8, list = F)[, 1]
library(caret)
train_idx <- createDataPartition(stagec_1$ploidy, p =.8, list = F)[, 1]
test_idx <- setdiff(1:nrow(stagec_1), train_idx)
train_set <- stagec_1[train_idx, ]
test_set <- stagec_1[test_idx, ]
test_set %>% dim()
train_set %>%dim()
test_set %>% dim()
randomForest(ploidy ~ ., data = stagec_1, ntree = 100, proximity = T)
m_rf <- randomForest(ploidy ~ ., data = stagec_1, ntree = 100, proximity = T)
m_rf <- randomForest(ploidy ~ ., data = stagec_1, ntree = 100, proximity = T)
m_rf
importance(m_rf)
varImpPlot(m_rf)
actual <- test_set[, 'ploidy']
actual
yhat_rf <- predict(m_rf, test_set[, -c('ploidy')])
library(tidyverse)
actual <- test_set[, 'ploidy']
yhat_rf <- predict(m_rf, test_set %>% dplyr::select(-ploidy))
yhat_rf
confusionMatrix(actual, yhat_rf)
plot(m_rf)
par(mfrow = c(1, 1))
plot(m_rf)
plot(margin(m_rf))
par(mfrow = c(1, 2))
par(mfrow = c(1, 2))
plot(m_rf)
plot(margin(m_rf))
par(mfrow = c(1, 2))
plot(m_rf)
plot(margin(m_rf))
par(mfrow = c(1, 1))
